# =============================================================================
# Production Dockerfile - Backend API Multi-stage optimized build
# =============================================================================

# Stage 1: Backend Dependencies
FROM node:22-alpine AS backend-dependencies

WORKDIR /app

# Copy backend package files
COPY backend/package*.json ./
COPY backend/prisma ./prisma/

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund && \
    npx prisma generate && \
    npm cache clean --force

# Stage 2: Backend Build
FROM node:22-alpine AS backend-build

WORKDIR /app

# Copy backend package files and install all dependencies
COPY backend/package*.json ./
COPY backend/prisma ./prisma/
RUN npm ci --no-audit --no-fund

# Copy backend source code
COPY backend/ .

# Generate Prisma client and build application
RUN npx prisma generate && \
    npm run build

# Stage 3: Backend Production Runtime
FROM node:22-alpine AS backend-production

# Install runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    redis \
    curl \
    dumb-init && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

WORKDIR /app

# Copy production dependencies
COPY --from=backend-dependencies --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=backend-dependencies --chown=nestjs:nodejs /app/prisma ./prisma

# Copy built application
COPY --from=backend-build --chown=nestjs:nodejs /app/dist ./dist
COPY --from=backend-build --chown=nestjs:nodejs /app/package*.json ./

# Create directories for logs and uploads
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nestjs:nodejs /app

# Switch to non-root user
USER nestjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Expose port
EXPOSE 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "run", "start:prod"]

# =============================================================================
# Production Dockerfile - Frontend Multi-stage optimized build
# =============================================================================

# Stage 1: Frontend Dependencies
FROM node:22-alpine AS frontend-dependencies

WORKDIR /app

# Copy frontend package files
COPY frontend/package*.json ./

# Install only production dependencies
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Stage 2: Frontend Build
FROM node:22-alpine AS frontend-build

WORKDIR /app

# Copy frontend package files and install all dependencies
COPY frontend/package*.json ./
RUN npm ci --no-audit --no-fund

# Copy frontend source code
COPY frontend/ .

# Build Next.js application
RUN npm run build

# Stage 3: Frontend Production Runtime
FROM node:22-alpine AS frontend-production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    dumb-init && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy production dependencies
COPY --from=frontend-dependencies --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=frontend-build --chown=nextjs:nodejs /app/.next ./.next
COPY --from=frontend-build --chown=nextjs:nodejs /app/public ./public
COPY --from=frontend-build --chown=nextjs:nodejs /app/package*.json ./
COPY --from=frontend-build --chown=nextjs:nodejs /app/next.config.js ./next.config.js 2>/dev/null || true

# Switch to non-root user
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Expose port
EXPOSE 3000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["npm", "run", "start"]
