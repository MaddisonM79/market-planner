# =============================================================================
# Production Docker Compose - Optimized for Production
# =============================================================================

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: market-manager-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/prod-postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups:/backups
    command: |
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: market-manager-redis-prod
    restart: always
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/prod-redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PgBouncer Connection Pooler
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: market-manager-pgbouncer-prod
    restart: always
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 50
      LISTEN_PORT: 6432
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main API Application (Multiple instances for load balancing)
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend-production
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: 3001
      LOG_LEVEL: info
      ENABLE_CORS: false
      ENABLE_SWAGGER: false
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: frontend-production
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend-production
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      WORKER_CONCURRENCY: 10
      LOG_LEVEL: info
    volumes:
      - api_logs:/app/logs
    command: ["npm", "run", "worker:prod"]
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: market-manager-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - market-manager-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Migration Runner (run-once service)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend-production
    container_name: market-manager-migrate-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: |
      sh -c "
        echo 'Waiting for database...'
        until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER}; do sleep 2; done
        echo 'Running Prisma migrations...'
        npx prisma migrate deploy
        echo 'Applying custom SQL functions (if exists)...'
        [ -f /app/sql/functions.sql ] && psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -f /app/sql/functions.sql || echo 'No functions.sql found'
        echo 'Creating indexes (if exists)...'
        [ -f /app/sql/indexes.sql ] && psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -f /app/sql/indexes.sql || echo 'No indexes.sql found'
        echo 'Creating triggers (if exists)...'
        [ -f /app/sql/triggers.sql ] && psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -f /app/sql/triggers.sql || echo 'No triggers.sql found'
        echo 'Migration completed!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - market-manager-prod
    profiles: ["migrate"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Seeder (run-once service)
  seed:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: backend-production
    container_name: market-manager-seed-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: |
      sh -c "
        echo 'Waiting for database...'
        until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER}; do sleep 2; done
        echo 'Seeding database...'
        npx prisma db seed
        echo 'Seeding category data (if exists)...'
        [ -f /app/sql/seed-categories.sql ] && psql postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} -f /app/sql/seed-categories.sql || echo 'No seed-categories.sql found'
        echo 'Seeding completed!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - market-manager-prod
    profiles: ["seed"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  market-manager-prod:
    name: market-manager-prod
    driver: bridge

volumes:
  postgres_prod_data:
    name: market-manager-postgres-prod-data
  redis_prod_data:
    name: market-manager-redis-prod-data
  api_logs:
    name: market-manager-api-logs-prod
  api_uploads:
    name: market-manager-api-uploads-prod
  nginx_logs:
    name: market-manager-nginx-logs-prod
